{"ast":null,"code":"import _defineProperty from\"/home/chirag/Documents/concetto/concetto_front/node_modules/@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as ActionTypes from'./ActionTypes';// The auth reducer. The starting state sets authentication\n// based on a token being in local storage. In a real app,\n// we would also want a util to check if the token is expired.\nvar Auth=function Auth(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{isLoading:false,isAuthenticated:localStorage.getItem('token')?true:false,token:localStorage.getItem('token'),user:localStorage.getItem('creds')?JSON.parse(localStorage.getItem('creds')):null,userinfo:localStorage.getItem('userinfo')?JSON.parse(localStorage.getItem('userinfo')):null,errMess:null};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ActionTypes.LOGIN_REQUEST:return _objectSpread({},state,{isLoading:true,isAuthenticated:false,user:action.creds});case ActionTypes.LOGIN_SUCCESS:return _objectSpread({},state,{isLoading:false,isAuthenticated:true,errMess:'',token:action.token,userinfo:action.userinfo});case ActionTypes.LOGIN_FAILURE:return _objectSpread({},state,{isLoading:false,isAuthenticated:false,errMess:action.message});case ActionTypes.LOGOUT_REQUEST:return _objectSpread({},state,{isLoading:true,isAuthenticated:true});case ActionTypes.LOGOUT_SUCCESS:return _objectSpread({},state,{isLoading:false,isAuthenticated:false,token:'',user:null,userinfo:null});case ActionTypes.EDIT_USER:return _objectSpread({},state,{userinfo:action.payload});case ActionTypes.EDIT_PASSWORD:return _objectSpread({},state,{user:action.payload});default:return state;}};export default Auth;","map":{"version":3,"sources":["/home/chirag/Documents/concetto/concetto_front/src/redux/auth.js"],"names":["ActionTypes","Auth","state","isLoading","isAuthenticated","localStorage","getItem","token","user","JSON","parse","userinfo","errMess","action","type","LOGIN_REQUEST","creds","LOGIN_SUCCESS","LOGIN_FAILURE","message","LOGOUT_REQUEST","LOGOUT_SUCCESS","EDIT_USER","payload","EDIT_PASSWORD"],"mappings":"+4BAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,eAA7B,CAEA;AACA;AACA;AACA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAOK,IAPJC,CAAAA,KAOI,2DAPI,CACdC,SAAS,CAAE,KADG,CAEdC,eAAe,CAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAAgC,IAAhC,CAAuC,KAF1C,CAGdC,KAAK,CAAEF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAHO,CAIdE,IAAI,CAAEH,YAAY,CAACC,OAAb,CAAqB,OAArB,EAAgCG,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAhC,CAA4E,IAJpE,CAKdK,QAAQ,CAAEN,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAmCG,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAnC,CAAkF,IAL9E,CAMdM,OAAO,CAAE,IANK,CAOJ,IAAXC,CAAAA,MAAW,2CACd,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKd,CAAAA,WAAW,CAACe,aAAjB,CACI,wBAAWb,KAAX,EACIC,SAAS,CAAE,IADf,CAEIC,eAAe,CAAE,KAFrB,CAGII,IAAI,CAAEK,MAAM,CAACG,KAHjB,GAKJ,IAAKhB,CAAAA,WAAW,CAACiB,aAAjB,CACI,wBAAWf,KAAX,EACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,IAFrB,CAGIQ,OAAO,CAAE,EAHb,CAIIL,KAAK,CAAEM,MAAM,CAACN,KAJlB,CAKII,QAAQ,CAAEE,MAAM,CAACF,QALrB,GAOJ,IAAKX,CAAAA,WAAW,CAACkB,aAAjB,CACI,wBAAWhB,KAAX,EACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,KAFrB,CAGIQ,OAAO,CAAEC,MAAM,CAACM,OAHpB,GAKJ,IAAKnB,CAAAA,WAAW,CAACoB,cAAjB,CACI,wBAAWlB,KAAX,EACIC,SAAS,CAAE,IADf,CAEIC,eAAe,CAAE,IAFrB,GAKJ,IAAKJ,CAAAA,WAAW,CAACqB,cAAjB,CACI,wBAAWnB,KAAX,EACIC,SAAS,CAAE,KADf,CAEIC,eAAe,CAAE,KAFrB,CAGIG,KAAK,CAAE,EAHX,CAIIC,IAAI,CAAE,IAJV,CAKIG,QAAQ,CAAE,IALd,GAQJ,IAAKX,CAAAA,WAAW,CAACsB,SAAjB,CACI,wBAAWpB,KAAX,EACIS,QAAQ,CAAEE,MAAM,CAACU,OADrB,GAGJ,IAAKvB,CAAAA,WAAW,CAACwB,aAAjB,CACI,wBACOtB,KADP,EAEIM,IAAI,CAAEK,MAAM,CAACU,OAFjB,GAIJ,QACI,MAAOrB,CAAAA,KAAP,CA9CR,CAgDH,CAxDD,CA0DA,cAAeD,CAAAA,IAAf","sourcesContent":["import * as ActionTypes from './ActionTypes';\n\n// The auth reducer. The starting state sets authentication\n// based on a token being in local storage. In a real app,\n// we would also want a util to check if the token is expired.\nconst Auth = (state = {\n        isLoading: false,\n        isAuthenticated: localStorage.getItem('token') ? true : false,\n        token: localStorage.getItem('token'),\n        user: localStorage.getItem('creds') ? JSON.parse(localStorage.getItem('creds')) : null,\n        userinfo: localStorage.getItem('userinfo') ? JSON.parse(localStorage.getItem('userinfo')) : null,\n        errMess: null\n    }, action) => {\n    switch (action.type) {\n        case ActionTypes.LOGIN_REQUEST:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: false,\n                user: action.creds\n            };\n        case ActionTypes.LOGIN_SUCCESS:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: true,\n                errMess: '',\n                token: action.token,\n                userinfo: action.userinfo\n            };\n        case ActionTypes.LOGIN_FAILURE:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                errMess: action.message\n            };\n        case ActionTypes.LOGOUT_REQUEST:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: true\n            };\n            \n        case ActionTypes.LOGOUT_SUCCESS:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                token: '',\n                user: null,\n                userinfo: null\n            };\n\n        case ActionTypes.EDIT_USER:\n            return {...state,\n                userinfo: action.payload};\n\n        case ActionTypes.EDIT_PASSWORD:\n            return {\n                ...state,\n                user: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}